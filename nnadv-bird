#!/usr/bin/env python3

import yaml
import argparse


def transform_config(config):
    advertisement = {}
    for upstream in config['upstream']:
        advertisement[upstream] = {}

    for prefix, peers in config['advertisement'].items():
        for upstream in config['upstream']:
            if peers[upstream]:
                advertisement[upstream][prefix] = peers[upstream]
    return advertisement


def generate_bird_filter(filter_name, prefix_map, asn):
    body_filter = ''
    for prefix, prepend in prefix_map.items():
        if prepend == 1:
            body_filter += '  if (net = %s) then accept;\n' % (prefix,)
            continue
        body_filter += '  if (net = %s) then {\n' % (prefix,)
        for _ in range(prepend):
            body_filter += '    bgp_path.prepend(%s);\n' % (asn,)
        body_filter += '    accept;\n  }\n'

    body_filter += '  reject;\n'

    filter = "filter export_%s\n{\n%s}" % (filter_name, body_filter)
    return filter


def generate_bird_filter_file(template, filter_name):
    return template % (filter_name,)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', required=True, help='Path to config file')
    parser.add_argument('--filename-format', required=True, help='File name format')
    parser.add_argument('--asn', required=True, help='AS number')
    args = parser.parse_args()

    with open(args.config, 'r') as f:
        config = yaml.safe_load(f)

    advertisement = transform_config(config)
    for peer, prefix in advertisement.items():
        file = generate_bird_filter_file(args.filename_format, peer)
        filter = generate_bird_filter(peer, prefix, args.asn)
        with open(file, 'w') as f:
            f.write(filter)


if __name__ == '__main__':
    main()
