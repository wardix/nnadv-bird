#!/usr/bin/env python3

import yaml
import argparse
import os


def transform_config(config):
    advertisement = {}

    for prefix, peers in config["advertisement"].items():
        for upstream, prepend in peers.items():
            if not upstream in advertisement:
                advertisement[upstream] = {}
            if prepend:
                advertisement[upstream][prefix] = prepend
    return advertisement


def generate_bird_filter_content(
    filtername_format, custom_directory, peer, prefix_map, asn
):
    filter_content = f'  include "{custom_directory}/*.conf";\n'
    for prefix, prepend in prefix_map.items():
        filter_content += f"  if (net = {prefix}) then {{\n"
        for _ in range(prepend - 1):
            filter_content += f"    bgp_path.prepend({asn});\n"
        filter_content += "    accept;\n  }\n"

    filter_content += "  reject;\n"

    filtername = filtername_format % (peer,)
    filter = f"filter {filtername}\n{{\n{filter_content}}}"
    return filter


def generate_filename(template, filter_name):
    return template % (filter_name,)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--config", required=True, help="Path to config file")
    parser.add_argument("--filename-format", required=True, help="File name format")
    parser.add_argument(
        "--customdir-format", required=True, help="Custom directory name format"
    )
    parser.add_argument("--filtername-format", required=True, help="Filter name format")
    parser.add_argument("--asn", required=True, help="AS number")
    args = parser.parse_args()

    with open(args.config, "r") as f:
        config = yaml.safe_load(f)

    advertisement = transform_config(config)
    for peer, prefix in advertisement.items():
        filter_file = generate_filename(args.filename_format, peer)
        custom_directory = generate_filename(args.customdir_format, peer)
        filter = generate_bird_filter_content(
            args.filtername_format, custom_directory, peer, prefix, args.asn
        )
        os.makedirs(custom_directory, exist_ok=True)
        with open(filter_file, "w") as f:
            f.write(filter)


if __name__ == "__main__":
    main()
